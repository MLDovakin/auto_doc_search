import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from langchain.chains.llm import LLMChain
from langchain.chains.combine_documents.base import BaseCombineDocumentsChain
from langchain.prompts import (SystemMessagePromptTemplate, HumanMessagePromptTemplate, ChatPromptTemplate,
                               PromptTemplate)

from gigachat_api.gigachat_api_call import giga_chat_call
# from gigachat_api.devices_settings import devices_settings
from langchain.chains.question_answering import load_qa_chain
from typing import Dict, Optional, List

import re
import pandas as pd

NEW_FACT_EVALVALUATION_PROMPT = f"""
[System Role]  
Вы являетесь экспертом-оценщиком. Ваша задача — объективно оценить ответ на запрос пользователя, опираясь на предоставленные чанки базы знаний.  

### Ваши задачи:  
1. **Точность (Accuracy)**:  
    - Проверьте, соответствуют ли числовые условия и факты в ответе информации из релевантных чанков. Числовые данные (например, суммы, ставки, сроки) являются приоритетными.  
    - Ответ может быть принят (оценка 1), если все основные числовые условия указаны верно, даже если текстовые факты (описания, дополнительные детали) не включены.  
    - Ответ не должен содержать информации, отсутствующей в чанках (галлюцинации).  

2. **Полнота (Completeness)**:  
    - Проверьте, включены ли все ключевые числовые условия (например, процентные ставки, сроки, лимиты).  
    - Не снижайте оценку, если второстепенные текстовые факты пропущены, при условии, что все основные числовые данные предоставлены.  

3. **Открытость (Honesty)**:  
    - Если информация не может быть предоставлена из-за отсутствия данных в чанках, модель должна честно указать это.  

### Шкала для итоговой классификации:  
- **1 (Принять)**: Ответ включает все основные числовые условия и не содержит недостоверной информации. Текстовые пропуски допустимы.  
- **2 (Не принять)**: Ответ не включает ключевые числовые данные, содержит галлюцинации или существенные ошибки.  

Используйте следующую шкалу для промежуточной оценки:  
- **Точность**: [[оценка от 1 до 5]]. Причина: [[ваше объяснение]].  
- **Полнота**: [[оценка от 1 до 5]]. Причина: [[ваше объяснение]].  

### Формат вывода:  
1. **Оценка Точности**: [[оценка от 1 до 5]]. Причина: [[ваше объяснение]].  
2. **Оценка Полноты**: [[оценка от 1 до 5]]. Причина: [[ваше объяснение]].  
3. **Итоговая классификация**: [[1 или 2]]. Причина: [[обоснование итогового решения]].  
"""



def get_llm_facts(input_chunk: str, llm: giga_chat_call):
    FACT_EXTRACT_PROMPT = f"""Основываясь на предоставленном тексте, пожалуйста, сгенерируйте исчерпывающий список фактических утверждений, которые можно вывести из данного текста.
    Если утверждение относится к конкретному имени услуги (банк, организация, название услуги) то так же пиши название в факте.

    **Требования к фактам**
    1. В фактах должны присутствовать все числа из исходного текста. 
    2. Каждый факт имеет имя услуги (В Сбере, В Тинькофф, по ПДС и.т.д) в котором сказано в его отрывке текста.
    3. Смысл факта соответствует его смыслу из текста.

    **Пример**
    Пример текста:
    "Content:Например, у Тинькофф ставка на покупки может варьироваться от 12%, но может достигать и 59,9%. (Для каждого клиента индивидуальна).
    А ставка на снятие средств и переводы может быть от 30% до 69,9%.
    У Кредитной СберКарты действительно низкая ставка и действует для всех клиентов:
    9,8% на категорию Здоровье и онлайн-оплату в МегаМаркете
    На операции, совершенные в первые 30 дней с даты подписания договора, проценты начисляются по сниженной ставке 24,8% до момента полного погашения задолженности.
    Приветственная ставка распространяется на все виды операций, в т.ч. покупки, снятие, переводы и погашения невыгодных кредиток в сторонних банках.
    На операции, совершенные с 31 дня, проценты начисляются по ставке 38,8%.
    Content:В программе ПДС есть возможность получения налогового вычета на личные взносы участника на сумму до 400 000 руб. в год.
    Участник программы долгосрочных сбережений может вернуть НДФЛ на сумму до 52 000 руб.
    По кредитной карте ВТБ бесплатные переводы возможны в первые 30 дней с момента подписания договора, но не более чем 100 000 рублей.
    После 30 дней взимается комиссия 5,9% плюс 590 рублей.
    Максимальный размер кешбэка в месяц за покупки в категориях – 3 000 рублей. В дальнейшем клиент получает кешбэк 2% в категориях «Транспорт и такси»"

    Пример JSON:
    {{
        "claims": [
            "В Тинькофф ставка на покупки может варьироваться от 12%, но может достигать и 59,9%. (Для каждого клиента индивидуальна)",
            "В Тинькофф ставка на снятие средств и переводы может быть от 30% до 69,9%."
            "В Сбере у кредитной СберКарты ставка 9,8% на категорию Здоровье и онлайн-оплату в МегаМаркете."
            "В Сбере на операции, совершенные в первые 30 дней с даты подписания договора, проценты начисляются по сниженной ставке 24,8% до момента полного погашения задолженности.",
            "В Сбере На операции, совершенные с 31 дня, проценты начисляются по ставке 38,8%.",
            "По программе ПДС есть возможность получения налогового вычета на личные взносы участника на сумму до 400 000 руб. в год.",
            "По программе ПДС Участник программы долгосрочных сбережений может вернуть НДФЛ на сумму до 52 000 руб."
            "В ВТБ по кредитной карте ВТБ бесплатные переводы возможны в первые 30 дней с момента подписания договора, но не более чем 100 000 рублей.",
            "В ВТБ по кредитной карте ВТБ после 30 дней взимается комиссия 5,9% плюс 590 рублей.
            "В ВТБ Максимальный размер кешбэка в месяц за покупки в категориях – 3 000 рублей. В дальнейшем клиент получает кешбэк 2% в категориях «Транспорт и такси»"
        ]
    }}
    ===== КОНЕЦ ПРИМЕРА ======

    **
    ВАЖНО: Убедитесь, что возвращаете только в формате JSON, с ключом "claims" в виде списка строк. Никаких слов или объяснений не требуется.
    Включайте только фактические утверждения, и утверждения, которые вы извлекаете, должны включать полный контекст, в котором они представлены, а НЕ выборочные факты.
    В начале каждого факта обязательно указывайте к какой услуге относится факт (В Сбере, В ВТБ, По ПДС итд).     
    **

    Текст:
    {input_chunk}

    JSON:
    """
    facts = llm.invoke(FACT_EXTRACT_PROMPT)

    return facts


def ans_query(query, chunk, llm: giga_chat_call):
    ANSWER_TO_CHUNK = f"""Ответь на вопрос пользователя используя заданный контекст. 
   Учти основные условия по продукту которые есть в контексте. Обязательно указывай числовые данные если они есть в контексте и нужны для ответа на вопрос пользователя.
   Подробно отвечай на вопрос пользователя с перечислением всех условий продукта или услуги.

   [Вопрос]
   {query}

   [Контекст]
   {chunk}

   [Ответ]"""
    facts = llm.invoke(ANSWER_TO_CHUNK)

    return facts


def validate_ans(question, input_answer, max_model_answer, llm: giga_chat_call):
    QUERY_RANGING_PROMPT = f"""Вы — AI-ассистент по банковской тематике. В следующем задании вам представлен вопрос (Question), ответ RAG-приложения (Response) и эталонный ответ (Label). Ваша задача — оценить, насколько хорошо ответ RAG-приложения соответствует эталонному ответу (Label), используя приведённые ниже критерии оценки.  
   ### Критерии оценки:  
   1. **Основные условия по продукту**:  
      - Указаны ли в ответе основные условия продукта (например, тип продукта, основные характеристики)?  
      - Если отсутствует хотя бы одно важное текстовое условие, оценка снижается.  
      - Если в ответе указаны условия по услуге которые нужны для ответа но не указаны какие-то дополнительные текстовые условия, то все равно ответ будет верным.

   2. **Числовые данные**:  
      - Указаны ли все ключевые числовые данные (например, ставки, лимиты, суммы, сроки), связанные с продуктом?  
      - Наличие ошибок, пропусков или несоответствий в числовых данных снижает оценку.  
      - Если по контексту вопроса названы основные числовые данные и текстовые факты которые нужны для ответа на вопрос но пропущены дополнительные факты, то ответ все равно верный.

   ---

   ### Оценка по шкале от 1 до 5:
   - **1**: Ответ не соответствует эталону. Основные условия и числовые данные отсутствуют или неверны.  
   - **2**: Ответ частично соответствует эталону, но отсутствует большинство основных условий и числовых данных.  
   - **3**: Ответ включает некоторые ключевые текстовые условия и числовые данные, но имеет значительные пропуски или несоответствия.  
   - **4**: Ответ в целом соответствует эталону, включает большинство основных условий и числовых данных, но с незначительными ошибками.  
   - **5**: Ответ полностью соответствует эталону, включает все основные условия и числовые данные без ошибок или пропусков.  

   ---

   ### Формат вывода:  
   Представьте вашу финальную оценку в формате: "[[оценка]]", а затем дайте обоснование.  
   Пример:  
   **Оценка**: [[3]], **Причина**: [[Ответ RAG-приложения частично соответствует эталону, но отсутствует одно из ключевых условий продукта.]]  

   [Start of User Question]  
   {question}  
   [End of User Question]  

   [Start of Label]  
   {max_model_answer}  
   [End of Label]  

   [Start of RAG’s Application Response]  
   {input_answer}  
   [End of RAG’s Application Response]"""

    facts = llm.invoke(QUERY_RANGING_PROMPT)

    return facts


def get_relevant_facts(input_question, fact_list, llm: giga_chat_call):
    EXTRACT_MAIN_FACT = f"""Вы работник банка - вам дан вопрос клиента и факты из базы знаний системы. 
    Отбери из базы данных до 10 фактов которые нужны для полного и исчерпывающего ответа на вопрос клиента. 

    ***Требования к фактам***
    1. Факты по содержанию соответствуют запросу пользователя.
    2. В факте должны присутствовать основные числовые данные по этому продукту (лимиты, ставки, тарифы и.т.д)
    3. Факты должны соответствовать продукту из вопроса пользователя.

    ***Примеры***

    **Пример 1**
    [Question] Бонусы спасибо

    [Факты из базы данных]
    [FACT] Лимиты на начисление миль учитываются совокупно для покупок по карте основного держателя и по всем дополнительным картам.
    [FACT] СберКарта Адафа - это дебетовая карта, тариф которой подстраивается под клиента.
    [FACT] Не нужно выпускать новую карту, если Вы хотите начать получать зарплату или пенсию, или подключить премиальный пакет.
    [FACT] Лимит по начислению бонусов в месяц зависит от наличия продуктов Сбера у клиента: если у клиента только Кредитная СберКарта, то лимит бонусов в месяц составляет 2000.
    [FACT] Если у клиента есть подписка СберПрайм+, то лимит по начислению бонусов спасибо в месяц составляет 15000 бонусов.
    [FACT] У клиента с Пакетом Премьер – лимит 20000, у клиентов СБ1 или РВ – нет лимита на получение бонусов.

    [РЕЛЕВАНТНЫЕ ФАКТЫ]
    [FACT] Лимит по начислению бонусов в месяц зависит от наличия продуктов Сбера у клиента: если у клиента только Кредитная СберКарта, то лимит бонусов в месяц составляет 2000.
    [FACT] Если у клиента есть подписка СберПрайм+, то лимит по начислению бонусов спасибо в месяц составляет 15000 бонусов.
    [FACT] У клиента с Пакетом Премьер – лимит 20000, у клиентов СБ1 или РВ – нет лимита на получение бонусов.

    **Пример 2**
    [Question] Лимит по карте
    [Факты из базы данных]
    [FACT] Лимит кешбэка составляет 5000 рублей в месяц и 10 000 миль или баллов в зависимости от карты.
    [FACT] Требования к клиенту для оформления карты: возраст от 18 лет; гражданство - Российская Федерация, иностранные граждане, лица без гражданства.
    [FACT] Кредитный лимит - это максимальная сумма, которую клиент может потратить в долг. Лимит устанавливается индивидуально для каждого клиента.
    [FACT] Платежная система карты: Мир; возможность бесконтактной оплаты и оплаты телефоном: есть; валюта карты: рубли; оплата за границей недоступна; срок действия: 10 лет.
    [FACT] Сумму для погашения задолженности можно узнать в приложении СберБанк Онлайн в разделе 'Задолженность'.
    [FACT] Чтобы узнать кредитный лимит, откройте приложение или войдите в личный кабинет СберБанк Онлайн, нажмите на кредитную карту и выберите 'Подробнее о задолженности'. Там будет указан доступный лимит по карте, даты текущего отчетного периода, суммы обязательного платежа и долга на сегодня, а также задолженность по беспроцентному периоду.

    [РЕЛЕВАНТНЫЕ ФАКТЫ]
    [FACT] Максимальная сумма снятия свыше 500 000 ₽/день: в банкоматах Сбербанка - недоступно; в кассах Сбербанка - 0,5% от суммы превышения лимита; в банкоматах других банков - недоступно; в кассах других банков - 1% от суммы, но не менее 150 ₽.
    [FACT] Лимит кешбэка составляет 5000 рублей в месяц и 10 000 миль или баллов в зависимости от карты.
    [FACT] Кредитный лимит - это максимальная сумма, которую клиент может потратить в долг. Лимит устанавливается индивидуально для каждого клиента.

    **Пример 3**
    [Question] Процент на снятие 
    [Факты из базы данных]
    [FACT] По Кредитной СберКарте бесплатное снятие наличных предоставляется в первые 30 дней с даты подписания договора. В дальнейшем за снятие наличных взимается комиссия 3,9% от суммы плюс 390 рублей. На сумму задолженности начисляются проценты по ставке 24,8% за снятие в первые 30 дней и 38,8% за снятие с 31-го дня.
    [FACT] Уточнить условия и размер процентной ставки на снятие наличных со своей действующей карты ВТБ можно в своем банке.
    [FACT] На сумму снятия распространяется беспроцентный период, но если не погасить задолженность вовремя, начисляются проценты по ставке до 59,9%.
    [FACT] С Кредитной СберКарты можно снимать наличные. Обратите внимание на то, что при снятии наличных взимается комиссия 3,9% от суммы выдачи плюс 390 рублей, а беспроцентный период на такие операции не распространяется
    [FACT] Уточнить условия и размер процентной ставки на снятие наличных со своей действующей карте Альфабанка можно в своем банке.
    [FACT] Процентная ставка на операции по снятию наличных зависит от Тарифного плана по карте. Процентную ставку клиент может посмотреть самостоятельно в СБЕРБанк онлайн в разделе "Кредитная карта - Настройки - Тарифы по карте"
    [FACT] Кредитная карта в первую очередь для наличных покупок, а не для снятия средств. Поэтому банки, как правило, ограничивают сумму снятия без комиссии и сразу начинают начислять проценты.

    [РЕЛЕВАНТНЫЕ ФАКТЫ]
    [FACT] По Кредитной СберКарте бесплатное снятие наличных предоставляется в первые 30 дней с даты подписания договора. В дальнейшем за снятие наличных взимается комиссия 3,9% от суммы плюс 390 рублей. На сумму задолженности начисляются проценты по ставке 24,8% за снятие в первые 30 дней и 38,8% за снятие с 31-го дня.
    [FACT] Комиссия за выдачу наличных в СберБанке — 3,9% от суммы выдачи плюс 390 рублей
    [FACT] Процентная ставка на операции по снятию наличных зависит от Тарифного плана по карте. Процентную ставку клиент может посмотреть самостоятельно в СБЕРБанк онлайн в разделе "Кредитная карта - Настройки - Тарифы по карте"

    **ВАЖНО**
    1. Извлекаемые факты должны включать все числовые данные только по продукту о котором спрашивается в вопросе.
    2. В извлекаемых фактах обязательно должны присутствовать числовые факты по контексту если они есть в фактах из базы данных.
    3. Содержание извлекаемых фактов должно соответствовать запросу клиента. 
    4. Выводите только до 10 извлекаемые фактов которые релевантны вопросу и ничего более.

    [Question] {input_question}
    [Факты из базы данных]
    {fact_list}

    [РЕЛЕВАТНЫЕ ФАКТЫ]
    """
    facts_check_result = llm.invoke(EXTRACT_MAIN_FACT, )

    return facts_check_result


def new_fact_check_prompt(user_question, model_answer, chunk_facts, llm: giga_chat_call):
    FACT_EVALVALUATION_PROMPT = f"""
    [System Role]  
    Вы являетесь экспертом-оценщиком. Ваша задача — объективно оценить ответ на запрос пользователя, опираясь на предоставленные чанки базы знаний.  

    ### Ваши задачи:  
    1. **Точность (Accuracy)**:  
        - Проверьте, соответствуют ли числовые условия и факты в ответе информации из релевантных чанков. Числовые данные (например, суммы, ставки, сроки) являются приоритетными.  
        - Ответ может быть принят (оценка 1), если все основные числовые условия указаны верно, даже если текстовые факты (описания, дополнительные детали) не включены.  
        - Ответ не должен содержать информации, отсутствующей в чанках (галлюцинации).  

    2. **Полнота (Completeness)**:  
        - Проверьте, включены ли все ключевые числовые условия (например, процентные ставки, сроки, лимиты).  
        - Не снижайте оценку, если второстепенные текстовые факты пропущены, при условии, что все основные числовые данные предоставлены.  

    3. **Открытость (Honesty)**:  
        - Если информация не может быть предоставлена из-за отсутствия данных в чанках, модель должна честно указать это.  

    ### Шкала для итоговой классификации:  
    - **1 (Принять)**: Ответ включает все основные числовые условия и не содержит недостоверной информации. Текстовые пропуски допустимы.  
    - **2 (Не принять)**: Ответ не включает ключевые числовые данные, содержит галлюцинации или существенные ошибки.  

    Используйте следующую шкалу для промежуточной оценки:  
    - **Точность**: [[оценка от 1 до 5]]. Причина: [[ваше объяснение]].  
    - **Полнота**: [[оценка от 1 до 5]]. Причина: [[ваше объяснение]].  

    ### Формат вывода:  
    1. **Оценка Точности**: [[оценка от 1 до 5]]. Причина: [[ваше объяснение]].  
    2. **Оценка Полноты**: [[оценка от 1 до 5]]. Причина: [[ваше объяснение]].  
    3. **Итоговая классификация**: [[1 или 2]]. Причина: [[обоснование итогового решения]].  

    ###Конец примеров 

    [User Question]
    {user_question}

    [Knowledge Base Chunks]
    {chunk_facts}

    [Model Answer]
    {model_answer}"""
    facts_check_result = llm.invoke(FACT_EVALVALUATION_PROMPT)

    return facts_check_result


def validate_user_query(queries: List[str], input_answers: List[str], context_chunks: List[List[Dict[str, str]]],
                        fact_extraction: bool, llm: giga_chat_call, mode =None):
    valid_list = []

    global_index = len(queries)

    for ind in range(global_index):
        query = queries[ind]
        print(query)
        answer = input_answers[ind]

        # Преобразуем список чанков в строку
        chunks = context_chunks[ind]  # Получаем список словарей для текущего вопроса
        chunk_text = '\n'.join([f"Content:{chunk['chunk']}" for chunk in chunks])

        if fact_extraction:
            chunk_facts = get_llm_facts(input_chunk=chunk_text, llm=llm).content
            cleaned_data = chunk_facts.strip('```json\n').strip('```')
            cleaned_data = re.sub(r'\\[^\\"]', '', cleaned_data)
            cleaned_data = cleaned_data.strip().replace('"claims"', '')

            pattern = r'"(.*?)"'
            fact_list = re.findall(pattern, cleaned_data)
            facts_list = "\n".join(f"{s}" for s in fact_list)


        ans_by_chunk = ans_query(query=query, chunk=facts_list, llm=llm).content
        validated_ans = validate_ans(question=query, input_answer=answer, max_model_answer=ans_by_chunk,
                                     llm=llm).content.replace('0', '2')

        valid_list.append(
            {'query': query, 'answer': answer, 'chunk_docs': chunk_text, 'validation_mark': validated_ans})

    validation_dataframe = pd.DataFrame(valid_list)

    return validation_dataframe


def validate_closed_answers(qa_dataframe, ground_answers, llm: giga_chat_call):
    valid_list = []

    # Объединяем два датафрейма по колонке query
    merged_df = pd.merge(qa_dataframe, ground_answers, on='query', how='inner')

    for _, row in merged_df.iterrows():
        query = row['query']
        answer = row['answer']
        ground_truth_answer = row['ground_truth_answer']

        # Передаем валидацию в функцию validate_ans
        validated_ans = validate_ans(question=query, input_answer=answer, max_model_answer=ground_truth_answer, llm=llm).content.replace('0', '2')

        valid_list.append(
            {'query': query, 'answer': answer, 'chunk_docs': ground_truth_answer, 'validation_mark': validated_ans}
        )

    validation_dataframe = pd.DataFrame(valid_list)

    return validation_dataframe


def extract_data(text):
    # Извлекаем оценку
    mark_match = re.search(r'\[\[(\d+)\]\]', text)
    mark = int(mark_match.group(1).replace('1', '2')) if mark_match else 2  # Если оценка не найдена, используем 2

    # Извлекаем объяснение
    explanation_match = re.search(r'\*\*(Обоснование|Причина)\*\*:\s*(.+)', text, re.DOTALL)
    explanation = explanation_match.group(1).strip() if explanation_match else "Обоснование отсутствует"

    return mark, explanation


def extract_and_transform_marks(df, source_column='validation_mark', mark_column='validation_mark',
                                explanation_column='explanation'):
    # Функция для извлечения оценки и объяснения

    # Применяем функцию извлечения оценки и объяснения
    extracted_data = df[source_column].apply(lambda x: pd.Series(extract_data(x)))
    extracted_data.columns = [mark_column, explanation_column]

    # Преобразуем оценки
    extracted_data[mark_column] = extracted_data[mark_column].apply(
        lambda x: 2 if x in [1, 2, 3] else 1
    )
    # Добавляем новые колонки к исходному DataFrame
    df = pd.concat([df, extracted_data], axis=1)
    return df


def get_validation_report(df, val_mark_column='validation_mark'):
    """
    Подсчитывает количество и процент правильных (1) и неправильных (2) ответов в колонке с оценками.

    Args:
        df (pd.DataFrame): DataFrame с колонкой оценок.
        val_mark_column (str): Название колонки с оценками (1 - правильно, 2 - неправильно).

    Returns:
        dict: Словарь с количеством и процентами правильных и неправильных ответов.
    """
    # Преобразование и извлечение меток
    df = extract_and_transform_marks(
        df,
        source_column=val_mark_column,
        mark_column='mark',
        explanation_column='explanation'
    )
    total = len(df)
    correct_count = (df['mark'] == 1).sum()
    incorrect_count = (df['mark'] == 2).sum()

    # Вычисление процентов
    correct_percent = (correct_count / total) * 100 if total > 0 else 0
    incorrect_percent = (incorrect_count / total) * 100 if total > 0 else 0

    # Возвращаем результат
    return {
        "Количество правильных ответов": int(correct_count),
        "Количество неправильных ответов": int(incorrect_count),
        "Правильные ответы (%)": round(correct_percent, 2),
        "Неправильные ответы (%)": round(incorrect_percent, 2),
        "Всего ответов": total
    }