 from typing import List, Optional
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from transformers import AutoTokenizer
import pandas as pd

import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


from gigachat_api.gigachat_api_call import GigaChatLLM, GigaChatV1Client
from embedders.devices_embedder import EmbedModelDevicesV1Client
from gigachat_api.tokenizer_api import TokenizerV1Client

from gigachat_api.gigachat_settings import settings
from gigachat_api.devices_settings import devices_settings

class LLMValidationEvaluator:
    def __init__(self, oracle_llm_api: GigaChatLLM, embedding_model_api: EmbedModelDevicesV1Client, tokenizer: TokenizerV1Client):
        """
        Инициализация Evaluator для проверки качества ответов с помощью GigaChatLLM как модели-оракула.
        :param oracle_llm_api: API клиент модели-оракула (GigaChatLLM).
        :param embedding_model_api: API клиент эмбеддинговой модели.
        :param tokenizer: Токенизатор для обработки текста.
        """
        print("[Инициализация] Настройка API клиентов...")
        self.oracle_llm_api = oracle_llm_api
        self.embedding_model_api = embedding_model_api
        self.tokenizer = tokenizer  # Универсальный токенизатор
        print("[Инициализация] Клиенты API успешно настроены!")

    def _get_embeddings(self, texts: List[str]) -> np.ndarray:
        """
        Получает эмбеддинги для списка текстов с использованием API клиента.
        :param texts: Список текстов для преобразования в эмбеддинги.
        :return: Массив numpy с эмбеддингами.
        """
        response = self.embedding_model_api.encode_batch(texts)
        return np.array(response, dtype="float32")

    def _cosine_similarity(self, vec1: np.ndarray, vec2: np.ndarray) -> float:
        """
        Вычисляет косинусное сходство между двумя векторами.
        :param vec1: Первый вектор.
        :param vec2: Второй вектор.
        :return: Значение косинусного сходства.
        """
        return float(cosine_similarity([vec1], [vec2])[0][0])

    def validate_factuality(self, question: str, answer: str, context_chunks: List[str]) -> str:
        """
        Проверяет фактологическую корректность ответа с помощью модели-оракула GigaChatLLM.
        :param question: Вопрос.
        :param answer: Ответ.
        :param context_chunks: Список retrieved контекстов.
        :return: Ответ модели-оракула с оценкой фактологической корректности.
        """
        print("[Factuality Validation] Проверка...")
        factuality_constant = 0
        prompt = f"""Ты - начинающий работник банка. 
        Тебе даны документы и твоя задача искать релевантную информацию по данному пользователем вопросу. 
        
        Вопрос: {question}
        Ответ: {answer}
        
        Контекст: {' '.join(context_chunks)}

        
        Проверь, содержит ли ответ информацию, отсутствующую в контексте.
        Если содержит, перечисли ошибки. Если нет, ответь только "Все факты верны." и ничего более.
        """
        response = self.oracle_llm_api.invoke(prompt)
        if 'Все факты верны' in response:
            factuality_constant =1 
        return factuality_constant

    def validate_consistency(self, question: str, answer: str,) -> float:
        """
        Проверяет согласованность ответа с контекстом, используя модель-оракул GigaChatLLM.
        :param answer: Ответ.
        :param context_chunks: Список retrieved контекстов.
        :return: Оценка согласованности (0.0 - 1.0).
        """
        print("[Consistenc Validation] Проверка...")
        reformulation_prompt = f"""Ты - банковский специалист который занимается созданием вопросов на основе текста банковских продуктов.
        Твоя задача по уже данному ответу сформулировать вопрос который соответствет контексту ответа. 
        Сформулируй  вопрос, основываясь только на предоставленном контексте.
        
        Answer: {answer}
        """
        reformulated_question = self.oracle_llm_api.invoke(reformulation_prompt).content

        embeddings = np.vstack(self._get_embeddings([question, reformulated_question]), dtype='float32')
        
        print("[Consistency Validation] Исходный вопрос:", question)
        print("[Consistency Validation] Переформулированный вопрос:", reformulated_question )
        
        original_emb, reformulated_emb = embeddings
        similarity = self._cosine_similarity(original_emb, reformulated_emb)
        print(f"[Consistency Validation] Сходство между вопросом и ответом: {similarity:.2%}")
        if similarity > 0.8:
            return 1
        return 0

    def validate_relevance(self, question: str, context_chunks: List[str]) -> float:
        """
        Проверяет релевантность retrieved контекста вопросу, используя модель-оракула GigaChatLLM.
        :param question: Вопрос.
        :param context_chunks: Список retrieved контекстов.
        :return: Оценка релевантности (0.0 - 1.0).
        """
        print("[Relevance Validation] Проверка...")
        prompt = f"""
        Вопрос: {question}
        Ответ:
        
        Контекст: {str(context_chunks)}

        Оцени, насколько контекст релевантен вопросу. Используй шкалу от 0 до 1.
        Релевантной является информация содержащая непосредственно сам ответ на вопрос пользователя по контексту.
        Так же при оценке учитывай насколько в ответе указаны конкретные числа, проценты и условия 
        которые содержатся в релевантном чанке.
        Выводи только числовую оценку.
        """
        
        response = self.oracle_llm_api.invoke(prompt).content
        try:
            score = float(response.strip())
            print(f"[Relevance Validation] Результат: {score:.2%}")
            relevance_score = max(0.0, min(1.0, score))
            if relevance_score > 0.5:
                return 1 
            return 0
        
        except ValueError as er:
            print("Ошибка обработки ответа модели-оракула.", er)
            return 0.0
        
def get_llm_facts(input_chunk: str, llm: Optional[GigaChatLLM]):
    
    FACT_EXTRACT_PROMPT=f"""Основываясь на предоставленном тексте, пожалуйста, сгенерируйте исчерпывающий список фактических утверждений, которые можно вывести из данного текста.
    Пример:
    Пример текста:
    "Эйнштейн получил Нобелевскую премию в 1968 году за открытие фотоэлектрического эффекта."

    Пример JSON:
    {{
        "claims": [
            "Эйнштейн получил Нобелевскую премию за открытие фотоэлектрического эффекта.",
            "Эйнштейн получил Нобелевскую премию в 1968 году."
        ]
    }}
    ===== КОНЕЦ ПРИМЕРА ======

    **
    ВАЖНО: Убедитесь, что возвращаете только в формате JSON, с ключом "claims" в виде списка строк. Никаких слов или объяснений не требуется.
    Включайте только фактические утверждения, и утверждения, которые вы извлекаете, должны включать полный контекст, в котором они представлены, а НЕ выборочные факты.
    Вы НЕ должны включать никаких предварительных знаний и брать текст в его поверхностном значении при извлечении утверждений.
    Фокусируйся только на информации в которой присутствуют числа. 
    **

    Текст:
    {input_chunk}

    JSON:
    """
    giga_pro_client = GigaChatV1Client(devices_settings, model_name="GigaChat-Max")
    giga_pro_llm = GigaChatLLM(gigachat_client=giga_pro_client)
    
    facts = giga_pro_llm.invoke(FACT_EXTRACT_PROMPT)
    
    return facts


'''
giga_pro_client = GigaChatV1Client(devices_settings, model_name='GigaChat-Max')
giga_pro_llm=GigaChatLLM(gigachat_client=giga_pro_client)

facts_df = pd.read_excel('gen_query_chunks/total_gen_queries.xlsx')['chunk'].tolist()
fact = get_llm_facts(input_chunk=facts_df[67], llm=giga_pro_llm).content

json_data = fact.strip().lstrip('json').strip()
claims_json = fact.loads(json_data)

# Извлекаем список строк с ключом "claims"
claims_list = claims_json['claims']
print(fact)

def get_fact_check(input_question, input_answer, facts, llm: Optional[GigaChatLLM]):
    FACT_CHECK_PROMPT=f"""Ты - работник банка, проверяющий фактическую достоверность ответа сипри сравнении с фактами. 
    Тебе дан ответ и факты из базы данных, тебе надо проверить насколько ответ системы на вопрос соответствует фактам. 
    Проверяй контекстное соответсвие ответа и обязательно соответствие чисел в ответе и фактах.


    ***ПРИМЕРЫ***
    Пример 1
    [QUESTION] Лимит по карте

    [ANSWER] Лимит по кредитной карте Сбербанка устанавливается индивидуально для каждого клиента и зависит от его дохода, долговых обязательств и кредитной истории. 
    Клиент может обратиться в офис банка или позвонить по телефону для уменьшения лимита. 
    Банк предлагает увеличение лимита 1 раз в 6 месяцев, исходя из анализа финансового состояния клиента. Дополнительные карты к кредитной карте не выпускаются. 

    Факты из базы данных: 
    [FACT] Изменение лимита на расходные операции или полное отключение лимита возможно в Сбербанк Онлайн или в офисе банка.
    [FACT] Преимуществами Кредитной СберКарты являются: вечное бесплатное обслуживание и SMS-информирование, понятный большой беспроцентный период до 120 дней, фиксированная ставка для всех клиентов, лимит до 1 миллиона рублей.
    [FACT] Итоговый одобренный лимит по кредитной карте может отличаться от предложенного банком. Окончательное решение принимается после подачи заявки.

    [RESULT] 0 
    Объяснение: Ответ не верный. В ответе ничего не сказано о том что лимит до 1 миллиона рублей, числа являются важной частью ответа и эта информация должна быть упомянута. 

    Пример 2
    [QUESTION] как долго длится акция на снятие без комиссии

    [ANSWER] Акция на снятие без комиссии по Кредитной СберКарте действует в течение первых 30 дней с даты подписания договора. 
    В этот период комиссия за снятие наличных в любых банкоматах и кассах СберБанка составляет 0 рублей. Далее комиссия за снятие будет 3,9% от суммы плюс 390 рублей.

    Факты из базы данных:
    [FACT] По Кредитной СберКарте бесплатное снятие наличных предоставляется в первые 30 дней с даты подписания договора. В дальнейшем за снятие наличных взимается комиссия 3,9% от суммы плюс 390 рублей. На сумму задолженности начисляются проценты по ставке 24,8% за снятие в первые 30 дней и 38,8% за снятие с 31-го дня.
    [FACT] В Сбере с даты подписания договора оформления Кредитной СберКарты и следующие 29 дней комиссия за снятие наличных в любых банкоматах и кассах СберБанка будет 0 ₽.
    [FACT] В Сбере на сумму снятия наличных с кредитной карты каждый день будут начисляться проценты: 24,8% на снятие наличных первые 30 дней с даты подписания договора, 38,8% годовых на снятие наличных с 31-ого дня с даты подписания договора.

    [RESULT] 0
    Объяснение: Ответ не верный. В ответе не указаны ставки 24,8% на снятие наличных первые 30 дней с даты подписания договора, 38,8% годовых на снятие наличных с 31-ого дня с даты подписания договора, они обязательно должны присутствовать.

    Пример 3
    [QUESTION] какой льготный период у кредитной сберкарты
    
    [ANSWER] Льготный период по Кредитной СберКарте составляет 120 дней: 1 месяц на покупки и 3 на погашение задолженности. 
    Новый льготный период 120 дней начинается каждый месяц. Если не получится погасить задолженность по истечении льготного периода, то банк начислит проценты. Продлить льготный период не получится.
    
    Факты из базы данных:
    [FACT] В Сбере по Кредитной СберКарте предоставляется беспроцентный период до 120 дней.
    [FACT] В Сбере стоимость информирования по Кредитной СберКарте бесплатно навсегда без условий и ограничений.
    [FACT] В Сбере продлить льготный период по кредитной карте не получится.
    
    [RESULT] 1
    Объяснение: Ответ верный потому что правильно назван беспроцентный период  120 дней по кредитной карте.
    
    Пример 4
    [QUESTION] Процент втб

    [ANSWER] Процентная ставка по кредитной карте ВТБ зависит от типа операции и может значительно отличаться от заявленной в рекламе. 
    На покупки в категориях "Здоровье" и "МегаМаркет" действует ставка 9,8%, на операции, совершенные в первые 30 дней с даты подписания договора, проценты начисляются по сниженной ставке 24,8%

    Факты из базы данных: 
    [FACT] У ВТБ ставка на покупки 9,9%-24,9% в первые 30 дней, а далее до 59,9%.
    [FACT] У Кредитной СберКарты ставка 9,8% на категорию Здоровье и онлайн-оплату в МегаМаркете.
    [FACT] После 30 дней по кредитной карте ВТБ взимается комиссия 5,9% плюс 590 рублей за снятие наличных.
    [FACT] На сумму снятия по кредитной карте ВТБ распространяется беспроцентный период, но при несвоевременном погашении задолженности начисляются проценты по ставке до 59,9%.
    [FACT] На сумму задолженности по Кредитной СберКарте начисляются проценты по ставке 24,8% за снятие в первые 30 дней и 38,8% за снятие с 31-го дня.

    [RESULT] 0
    Объяснение: Ответ не верный. Услуги в ответе относятся к кредитной СберКарте а не к карте ВТБ банка.

    ===== КОНЕЦ ПРИМЕРОВ ======

    **
    ВАЖНО: Числа играют важную роль в ответе, всегда проверяй соответствие чисел из фактов и числа из ответа. 
    Если ответ по контексту верный но в нем числа не соотвествуют базе знаний или не рассказаны все условия по данному вопросу, то ставь 0. 
    Выводи 0 если ответ не правильный и 1 если ответ соответствует контексту вопроса и числа в нем соответствуют фактам.
    **

    [QUESTION] {input_question}

    [ANSWER] {input_answer}

    Факты из базы данных: 
    {facts}

    [RESULT]"""
    facts_check_result = llm.invoke(FACT_CHECK_PROMPT)

    return facts_check_result
'''